"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Json = void 0;
const stream_1 = require("stream");
const File_1 = require("./File");
class Json {
    static parseJsonFile(file_1) {
        return __awaiter(this, arguments, void 0, function* (file, mappers = {}) {
            return new Promise((resolve, reject) => {
                const results = [];
                const stream = stream_1.Readable.from(file.buffer);
                stream
                    .on('data', data => results.push(...JSON.parse(data)))
                    .on('end', () => resolve(this.changeKeyValues(mappers, results)))
                    .on('error', error => reject(error));
            });
        });
    }
    static createTempJSONFileFromString(content) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield File_1.File.createTempFileFromString({
                fileName: 'temp-file.json',
                content: content,
                mimetype: 'application/json',
            });
            return {
                filePath: result.filePath,
                json_file: result.file,
                dirPath: result.dirPath,
            };
        });
    }
    static changeKeyValues(mappers, results) {
        if (mappers) {
            return results.map((result) => {
                const newResult = {};
                for (const key in result) {
                    if (mappers[key]) {
                        newResult[mappers[key]] = result[key];
                    }
                    else {
                        newResult[key] = result[key];
                    }
                }
                return newResult;
            });
        }
        return results;
    }
    static getLocalStorageObject(store_key) {
        try {
            if (!window.localStorage)
                return null;
            if (!window.localStorage.getItem(store_key))
                return null;
            const string = window.localStorage.getItem(store_key);
            if (!string)
                return null;
            return JSON.parse(string);
        }
        catch (e) {
            return null;
        }
    }
}
exports.Json = Json;
//# sourceMappingURL=Json.js.map