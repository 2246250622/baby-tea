"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Random = void 0;
const llama_facts_json_1 = __importDefault(require("../assets/llama.facts.json"));
const faker_1 = require("@faker-js/faker");
const Strings_1 = require("./Strings");
const UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', LOWERCASE = 'abcdefghijklmnopqrstuvwxyz', NUMBERS = '0123456789', SYMBOLS = '!@Â£$%^&*()_+=-{}[]<>?:;~';
class Random {
    static LlamaFact() {
        return llama_facts_json_1.default[Math.floor(Math.random() * llama_facts_json_1.default.length)];
    }
    static get uppercase() {
        return UPPERCASE[Math.floor(Math.random() * UPPERCASE.length)];
    }
    static get lowercase() {
        return LOWERCASE[Math.floor(Math.random() * LOWERCASE.length)];
    }
    static get number() {
        return NUMBERS[Math.floor(Math.random() * NUMBERS.length)];
    }
    static get symbol() {
        return SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
    }
    static Number(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
    }
    static String(length) {
        length || (length = Math.floor(Math.random() * 8) + 5);
        let result = '';
        for (let i = 0; i < length; i++) {
            switch (Math.floor(Math.random() * 3)) {
                case 0:
                    result += this.uppercase;
                    break;
                case 1:
                    result += this.lowercase;
                    break;
                case 2:
                    result += this.number;
                    break;
            }
        }
        return result;
    }
    static Password(length) {
        if (!length)
            length = 16;
        let result = '';
        const quotient = Math.floor(length / 4);
        const remainder = 4 % length;
        for (let l = 0; l < 4; l++) {
            for (let i = 0; i < quotient; i++) {
                switch (l) {
                    case 0:
                        result += this.uppercase;
                        break;
                    case 1:
                        result += this.lowercase;
                        break;
                    case 2:
                        result += this.number;
                        break;
                    case 3:
                        result += this.symbol;
                        break;
                }
            }
        }
        result += this.String(remainder);
        return Strings_1.Strings.randomize(result);
    }
    static Words(seperator, length, type, transform) {
        if (!seperator)
            seperator = ' ';
        if (!length)
            length = Math.floor(Math.random() * 5) + 1;
        let result = '';
        for (let i = 0; i < length; i++) {
            let word = '';
            if (!type) {
                word = faker_1.faker.word.sample();
            }
            else {
                switch (type) {
                    case 'noun':
                        word = faker_1.faker.word.noun();
                        break;
                    case 'adjective':
                        word = faker_1.faker.word.adjective();
                        break;
                    case 'adverb':
                        word = faker_1.faker.word.adverb();
                        break;
                }
            }
            if (transform && transform === 'capitalize') {
                result += Strings_1.Strings.capitalize(word);
            }
            else {
                result += word;
            }
            result += seperator;
        }
        const pos = result.lastIndexOf(seperator);
        return result.substring(0, pos);
    }
}
exports.Random = Random;
//# sourceMappingURL=Random.js.map