"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Csv = void 0;
const csv_parser_1 = __importDefault(require("csv-parser"));
const stream_1 = require("stream");
const File_1 = require("./File");
class Csv {
    static parseCsvFile(file, mappers) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const results = [];
                const stream = stream_1.Readable.from(file.buffer);
                stream
                    .pipe((0, csv_parser_1.default)({
                    mapHeaders: ({ header }) => {
                        var _a;
                        if (header.charCodeAt(0) === 0xfeff) {
                            header = header.replace(/^\uFEFF/gm, '');
                        }
                        return (_a = mappers === null || mappers === void 0 ? void 0 : mappers[header]) !== null && _a !== void 0 ? _a : header;
                    },
                }))
                    .on('data', data => results.push(data))
                    .on('end', () => resolve(results))
                    .on('error', error => reject(error));
            });
        });
    }
    static createTempCSVFileFromString(content) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield File_1.File.createTempFileFromString({
                    fileName: 'temp-file.csv',
                    content: content,
                    mimetype: 'text/csv',
                });
                return {
                    filePath: result.filePath,
                    csv_file: result.file,
                    dirPath: result.dirPath,
                };
            }
            catch (error) {
                throw new Error(`Error creating temporary file: ${error}`);
            }
        });
    }
}
exports.Csv = Csv;
//# sourceMappingURL=Csv.js.map