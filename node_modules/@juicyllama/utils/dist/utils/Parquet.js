"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parquet = void 0;
const parquetjs_1 = require("parquetjs");
const fs = __importStar(require("fs"));
const File_1 = require("./File");
class Parquet {
    static toParquet(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let pSchema;
            try {
                pSchema = new parquetjs_1.ParquetSchema(options.schema);
            }
            catch (e) {
                throw new Error(`Error creating parquet schema: ${e}`);
            }
            const tmp = yield File_1.File.createTempFilePath(options.fileName);
            const writer = yield parquetjs_1.ParquetWriter.openFile(pSchema, tmp.filePath);
            for (const row of options.data) {
                if (options.rowFunc) {
                    for (const [key, value] of Object.entries(row)) {
                        row[key] = options.rowFunc(value);
                    }
                }
                yield writer.appendRow(row);
            }
            yield writer.close();
            const fileContent = yield fs.promises.readFile(tmp.filePath);
            return {
                path: tmp.filePath,
                file: fileContent,
            };
        });
    }
}
exports.Parquet = Parquet;
//# sourceMappingURL=Parquet.js.map