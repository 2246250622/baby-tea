"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.File = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const Logger_1 = require("./Logger");
const stream_1 = require("stream");
const Random_1 = require("./Random");
const axios_1 = __importDefault(require("axios"));
const mimetypes = __importStar(require("../assets/mimetypes.json"));
const logger = new Logger_1.Logger();
class File {
    static unlink(filePath, dirPath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (dirPath) {
                    fs.rmSync(dirPath, { recursive: true, force: true });
                }
                else if (filePath) {
                    fs.promises.unlink(filePath);
                }
            }
            catch (e) {
                logger.warn(`[@juicyllama/utils::File::unlink] ${e.message}`, {
                    filePath: filePath,
                    dirPath: dirPath,
                    e: e,
                });
            }
        });
    }
    static createTempFileFromString(options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const tempDir = fs.mkdtempSync(path.join(fs.realpathSync('.'), 'temp-'));
                const tempFilePath = path.join(tempDir, options.fileName);
                yield fs.promises.writeFile(tempFilePath, options.content, 'utf-8');
                const temp_file = {
                    fieldname: options.fileName.split('.')[0],
                    originalname: options.fileName,
                    encoding: '7bit',
                    mimetype: options.mimetype,
                    buffer: yield fs.promises.readFile(tempFilePath),
                    size: (yield fs.promises.readFile(tempFilePath)).length,
                    stream: new stream_1.Readable(),
                    destination: tempFilePath,
                    filename: options.fileName,
                    path: tempFilePath,
                };
                return {
                    filePath: tempFilePath,
                    file: temp_file,
                    dirPath: tempDir,
                };
            }
            catch (error) {
                throw new Error(`Error creating temporary file: ${error}`);
            }
        });
    }
    static createTempFilePath(fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const tempDir = fs.mkdtempSync(path.join(fs.realpathSync('.'), 'temp-'));
                if (!fileName) {
                    fileName = Random_1.Random.String(10);
                }
                return {
                    filePath: path.join(tempDir, fileName),
                    dirPath: tempDir,
                    fileName: fileName,
                };
            }
            catch (error) {
                throw new Error(`Error creating temporary file path: ${error}`);
            }
        });
    }
    static md5Checksum(file) {
        const hash = crypto.createHash('md5');
        hash.update(file);
        return hash.digest('base64');
    }
    static createFileFromBase64(base64, filename) {
        return __awaiter(this, void 0, void 0, function* () {
            const buffer = Buffer.from(base64, 'base64');
            const file = {
                fieldname: 'file',
                originalname: filename,
                encoding: '7bit',
                mimetype: this.getMimeType(filename),
                buffer: buffer,
                size: buffer.length,
                stream: new stream_1.Readable(),
                destination: '',
                filename: filename,
                path: '',
            };
            return file;
        });
    }
    static downloadFile(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const download = yield axios_1.default.get(url, { responseType: 'arraybuffer' });
            const filename = url.split('/').pop() || '';
            const file = {
                fieldname: 'file',
                originalname: filename,
                encoding: '7bit',
                mimetype: this.getMimeType(filename),
                buffer: download.data,
                size: download.data.length,
                stream: new stream_1.Readable(),
                destination: '',
                filename: filename,
                path: '',
            };
            return file;
        });
    }
    static getMimeType(fileName) {
        const ext = fileName.split('.').pop();
        return ext ? mimetypes[ext] : 'application/octet-stream';
    }
    static exists(filePath) {
        return fs.existsSync(filePath);
    }
    static read(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            return fs.readFileSync(filePath, 'utf-8');
        });
    }
}
exports.File = File;
//# sourceMappingURL=File.js.map