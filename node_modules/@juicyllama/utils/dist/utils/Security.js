"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Security = void 0;
const env_1 = require("../enums/env");
const crypto_1 = require("crypto");
const jwt = __importStar(require("jwt-simple"));
const secret = 'JL@S7uD*0Su3rS$cr3t';
class Security {
    static hashPassword(password) {
        if (!password) {
            throw new Error('Password is empty');
        }
        if (password.length === 128) {
            return password;
        }
        return (0, crypto_1.createHash)('sha512').update(password).digest('hex');
    }
    static referrerCheck(referrer, domain) {
        if ((0, env_1.fromStringToEnv)() === env_1.Enviroment.production) {
            if (!referrer) {
                throw new Error('Unauthorized');
            }
            const referrer_url = new URL(referrer);
            if (referrer_url.origin !== domain) {
                throw new Error('Unauthorized');
            }
        }
        return true;
    }
    static encode(data) {
        return jwt.encode(data, secret);
    }
    static decode(token) {
        return jwt.decode(token, secret);
    }
}
exports.Security = Security;
//# sourceMappingURL=Security.js.map