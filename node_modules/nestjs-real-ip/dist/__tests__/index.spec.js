"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("supertest");
const common_1 = require("@nestjs/common");
const src_1 = require("../src");
const utils_1 = require("./helpers/utils");
const data_1 = require("./helpers/data");
describe.each(data_1.platforms)('Main %s platform', (platformName, platformClass) => {
    let app;
    let server;
    beforeEach(async () => {
        let TestController = class TestController {
            get(ip) {
                return ip;
            }
        };
        __decorate([
            (0, common_1.Get)('my-ip'),
            __param(0, (0, src_1.RealIP)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [String]),
            __metadata("design:returntype", String)
        ], TestController.prototype, "get", null);
        TestController = __decorate([
            (0, common_1.Controller)('/')
        ], TestController);
        app = await (0, utils_1.createServer)(TestController, platformClass);
        server = app.getHttpServer();
    });
    afterEach(async () => {
        await app.close();
    });
    it('Default IP address', async () => {
        const { statusCode, text } = await request(server).get('/my-ip');
        expect(statusCode).toEqual(200);
        expect(text).toEqual('::ffff:127.0.0.1');
    });
    it.each(data_1.headers)('With header "%s": "%s" ', async (header, value, expected) => {
        const { statusCode, text } = await request(server)
            .get('/my-ip')
            .set({ [header]: value });
        expect(statusCode).toEqual(200);
        expect(text).toEqual(expected);
    });
});
//# sourceMappingURL=index.spec.js.map